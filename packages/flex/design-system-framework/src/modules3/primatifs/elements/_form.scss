@use "sass:color";
@use "sass:list";
@use "../utilities/variables";
@use "../utilities/mixins";
@use "../utilities/animations";
@use "../utilities/functions";

$input-icon-color: variables.$grey-light;
$input-icon-active-color: variables.$grey;
$input-icon-width: functions.size(3.5em);
$input-lateral-padding: functions.size(1.5em);

$file-cta-background-color: variables.$white;
$file-cta-color: variables.$grey-dark;
$file-cta-hover-color: variables.$grey-dark;
$file-cta-active-color: variables.$grey-dark;

$file-border-color: variables.$border;
$file-radius: variables.$radius;
$file-name-border-color: variables.$border;
$file-name-border-style: solid;
$file-name-border-width: 1px 1px 1px 0;
$file-name-max-width: 16em;

$field-margin: functions.size(2em);

$help-size: variables.$size-small;

$label-color: variables.$grey-dark;
$label-weight: variables.$weight-bold;

.field {
    &:not(:first-child) {
        margin-top: $field-margin;
    }

    &:not(:last-child) {
        margin-bottom: 0.75em;
    }

    &.is-fullwidth {
        div.control {
            flex: 1;
        }
    }

    @include mixins.mobile {
        &.is-very-short,
        &.is-short {
            width: 50%;
        }

        &.is-long,
        &.is-very-long {
            width: 100%;
        }
    }

    @include mixins.tablet {
        &.is-very-short {
            width: functions.size(13em);
        }

        &.is-short {
            width: functions.size(27em);
        }

        &.is-long {
            width: functions.size(40em);
        }

        &.is-very-long {
            width: functions.size(50em);
        }
    }

    .select {
      // width: 100%;
      // @extend .is-fullwidth;
      @include mixins.fullwidth;

      select {
        // width: 100%;
        // @extend .is-fullwidth;
        @include mixins.fullwidth;
      }
    }

    &.has-addons {
        display: flex;
        justify-content: flex-start;

        .control {
            &:not(:last-child) {
                margin-right: -1px;
            }

            &:not(:first-child):not(:last-child) {
                .button,
                .input,
                .select select {
                    border-radius: 0;
                }
            }

            &:first-child {
                .button,
                .input,
                .select select {
                    border-bottom-right-radius: 0;
                    border-top-right-radius: 0;
                }
            }

            &:last-child {
                .button,
                .input,
                .select select {
                    border-bottom-left-radius: 0;
                    border-top-left-radius: 0;
                }
            }

            .button,
            .input,
            .select select {
                &:hover,
                &.is-hovered {
                    z-index: functions.zindex('tiny');
                }

                &:focus,
                &.is-focused,
                &:active,
                &.is-active {
                    z-index: functions.zindex('small');

                    &:hover {
                        z-index: functions.zindex('medium');
                    }
                }
            }

            &.is-expanded {
                flex-grow: 1;
            }
        }

        &.has-addons-centered {
            justify-content: center;
        }

        &.has-addons-right {
            justify-content: flex-end;
        }

        &.has-addons-fullwidth {
            .control {
                flex-grow: 1;
                flex-shrink: 0;
            }
        }
    }

    &.is-grouped {
        display: flex;
        justify-content: flex-start;

        & > .control {
            flex-shrink: 0;

            &:not(:last-child) {
                margin-bottom: 0;
                margin-right: 0.75em;
            }

            &.is-expanded {
                flex-grow: 1;
                flex-shrink: 1;
            }
        }

        &.is-grouped-centered {
            justify-content: center;
        }

        &.is-grouped-right {
            justify-content: flex-end;
        }

        &.is-grouped-multiline {
            flex-wrap: wrap;

            & > .control {
                &:last-child,
                &:not(:last-child) {
                    margin-bottom: 0.75em;
                }
            }

            &:last-child {
                margin-bottom: -0.75em;
            }

            &:not(:last-child) {
                margin-bottom: 0;
            }
        }
    }

    &.is-horizontal {
        @include mixins.tablet {
            display: flex;
        }
    }
}

.control {
    font-size: variables.$size-normal;
    position: relative;
    text-align: left;

    &.has-icon {
        .icon {
            color: var(--flex-input-icon-color, #{$input-icon-color});
            height: 2.25em;
            pointer-events: none;
            position: absolute;
            top: 0;
            width: 2.25em;
            z-index: functions.zindex('small');
        }

        .input {
            &:focus {
                & + .icon {
                    color: var(--flex-input-icon-active-color, #{$input-icon-active-color});
                }
            }

            &.is-small {
                & + .icon {
                    font-size: variables.$size-small;
                }
            }

            &.is-medium {
                & + .icon {
                    font-size: variables.$size-medium;
                }
            }

            &.is-large {
                & + .icon {
                    font-size: variables.$size-large;
                }
            }
        }

        &:not(.has-icon-right) {
            .icon {
                left: 0;
            }

            .input {
                padding-left: 2.25em;
            }
        }

        &.has-icon-right {
            .icon {
                right: 0;
            }

            .input {
                padding-right: 2.25em;
            }
        }
    }

    &.has-icons-left,
    &.has-icons-right {
        .input,
        .select {
            &:focus {
                & ~ .icon {
                    color: var(--flex-input-icon-active-color, #{$input-icon-active-color});
                }
            }

            &.is-small ~ .icon {
                font-size: variables.$size-small;
            }

            &.is-medium ~ .icon {
                font-size: variables.$size-medium;
            }

            &.is-large ~ .icon {
                font-size: variables.$size-large;
            }
        }

        .icon {
            color: var(--flex-input-icon-color, #{$input-icon-color});
            position: absolute;
            top: 0;
            height: 100%;
            width: $input-icon-width;
            pointer-events: auto;
            z-index: functions.zindex('void');

            [class^="flexi-"] {
                display: flex;
                font-size: functions.size(1.5em);
            }
        }

        .input {
            @each $name, $pair in variables.$colors-feedback {
                $color: list.nth($pair, 1);

                &.is-#{$name} {
                    border-color: var(--flex-input-border-color, #{variables.$input-border-color});

                    ~ .icon {
                        color: var(#{'--flex-'}#{$name}, #{$color});
                    }
                }
            }

            &.is-danger {
                border-color: var(--flex-danger, #{variables.$danger});
            }
        }
    }

    &.has-icons-left {
        .input,
        .select select {
            padding-left: $input-icon-width + $input-icon-width;
        }

        .icon {
            left: 0;
            border-top-left-radius: variables.$radius;
            border-bottom-left-radius: variables.$radius;
        }
    }

    &.has-icons-right {
        .input,
        .select select {
            padding-right: $input-icon-width + $input-icon-width;
        }

        .icon {
            // right: calc($input-icon-width / 3);
            right: functions.size(1.5em);
            border-top-right-radius: variables.$radius;
            border-bottom-right-radius: variables.$radius;
        }
    }

    /** Dynamic placeholders **/
    &.has-dynamic-placeholder {
        .icon {
            color: var(--flex-text, #{variables.$text});
        }

        label {
            position: absolute;
            top: functions.size(0.2em);
            // left: $input-lateral-padding;
            left: 1.4em;
            border-left: transparent functions.size(0.1em) solid;
            font-size: variables.$text-11;
            color: rgba(var(--flex-text, #{variables.$text}), 0.7);
            transform: translateY(0);
            transition: all 0.2s ease-out;
            z-index: functions.zindex('small');
            white-space: nowrap;
            text-overflow: ellipsis;
            max-width: calc(100% - 4em);
            overflow: hidden;
            pointer-events: none;
            user-select: none;

            .dropdown-trigger .field & {
              font-size: 1em;
              top: 0;
              height: 100%;
              display: flex;
              align-items: center;
              vertical-align: baseline;
            }
        }

        &.has-icons-left label {
            left: $input-icon-width + $input-icon-width;
        }

        select {
            padding-top: functions.size(1.9em);
        }

        .input {
            padding-top: functions.size(1.9em);

            &:placeholder-shown {
                padding-top: 0.375em;
            }

            &:-ms-input-placeholder {
                padding-top: 0.375em;
            }
        }

        textarea {
            padding-top: functions.size(1.4em);
        }

        input:placeholder-shown ~ label,
        textarea:placeholder-shown ~ label {
            visibility: hidden;
            opacity: 0;
            font-size: variables.$size-normal;
            transform: translateY(1em);
        }

        input:-ms-input-placeholder ~ label {
            visibility: hidden;
            opacity: 0;
            font-size: variables.$size-normal;
            transform: translateY(1em);
        }
    }

    &.has-password-discover {
        .input {
            @each $name, $pair in variables.$colors-feedback {
                &.is-#{$name} {
                    ~ .icon:not(:last-child) {
                        color: var(--flex-grey, #{variables.$grey});
                        background-color: transparent;
                        right: functions.size(4.5em);
                        cursor: pointer;

                        &:hover,
                        &:focus {
                            color: var(--flex-grey-darker, #{variables.$grey-darker});
                        }
                    }
                }
            }
        }
    }

    + .help {
        margin-left: functions.size(1em);
        margin-top: functions.size(0.5em);
    }

    .is-searching {
        background-color: transparent;
        border-top-right-radius: variables.$radius;
        border-bottom-right-radius: variables.$radius;
        height: 100%;
        position: absolute;
        right: 0;
        top: 0;
        width: functions.size(4.5em);

        &::after {
            @include mixins.loader;
            @include mixins.center(1em);
        }
    }

    &.is-loading {
        &::after {
            @include mixins.loader;

            position: absolute !important;
            right: 0.625em;
            top: 0.625em;
            z-index: functions.zindex('small');
        }

        &.is-small::after {
            font-size: variables.$size-small;
        }

        &.is-medium::after {
            font-size: variables.$size-medium;
        }

        &.is-large::after {
            font-size: variables.$size-large;
        }
    }
}

.field-label {
    .label {
        font-size: inherit;
    }

    @include mixins.mobile {
        margin-bottom: 0.5em;
    }

    @include mixins.tablet {
        flex-basis: 0;
        flex-grow: 1;
        flex-shrink: 0;
        margin-right: 1.5em;
        text-align: right;

        &.is-small {
            font-size: variables.$size-small;
            padding-top: 0.375em;
        }

        &.is-normal {
            padding-top: 0.375em;
        }

        &.is-medium {
            font-size: variables.$size-medium;
            padding-top: 0.375em;
        }

        &.is-large {
            font-size: variables.$size-large;
            padding-top: 0.375em;
        }
    }
}

.field-body {
    .field .field {
        margin-bottom: 0;
    }

    @include mixins.tablet {
        display: flex;
        flex-basis: 0;
        flex-grow: 5;
        flex-shrink: 1;

        .field {
            margin-bottom: 0;
        }

        & > .field {
            flex-shrink: 1;

            &:not(.is-narrow) {
                flex-grow: 1;
            }

            &:not(:last-child) {
                margin-right: 0.75em;
            }
        }
    }
}

.file {
    @include mixins.unselectable;

    align-items: stretch;
    display: flex;
    justify-content: flex-start;
    position: relative;

    // Colors
    @each $name, $pair in variables.$colors {
        $color: list.nth($pair, 1);
        $color-invert: list.nth($pair, 2);

        &.is-#{$name} {
            .file-cta {
                background-color: var(#{'--flex-'}#{$name}, #{$color});
                border-color: transparent;
                // color: var(--flex-color-invert, #{variables.$color-invert});
                color: var(#{'--flex-'}#{$name}#{'-invert'}, #{$color-invert});
            }

            &:hover,
            &.is-hovered {
                .file-cta {
                    background-color: color.adjust($color, $lightness: -2.5%);
                    border-color: transparent;
                    // color: var(--flex-color-invert, #{variables.$color-invert});
                    color: var(#{'--flex-'}#{$name}#{'-invert'}, #{$color-invert});
                }
            }

            &:focus,
            &.is-focused {
                .file-cta {
                    border-color: transparent;
                    // color: var(--flex-color-invert, #{variables.$color-invert});
                    color: var(#{'--flex-'}#{$name}#{'-invert'}, #{$color-invert});
                }
            }

            &:active,
            &.is-active {
                .file-cta {
                    background-color: color.adjust($color, $lightness: -5%);
                    border-color: transparent;
                    // color: var(--flex-color-invert, #{variables.$color-invert});
                    color: var(#{'--flex-'}#{$name}#{'-invert'}, #{$color-invert});
                }
            }
        }
    }

    // Sizes
    &.is-small {
        font-size: variables.$size-small;
    }

    &.is-medium {
        font-size: variables.$size-medium;

        .file-icon {
            .fa {
                font-size: 21px;
            }
        }
    }

    &.is-large {
        font-size: variables.$size-large;

        .file-icon {
            .fa {
                font-size: 28px;
            }
        }
    }

    // Modifiers
    &.has-name {
        .file-cta {
            border-bottom-right-radius: 0;
            border-top-right-radius: 0;
        }

        .file-name {
            border-bottom-left-radius: 0;
            border-top-left-radius: 0;
        }

        &.is-empty {
            .file-cta {
                border-radius: $file-radius;
            }

            .file-name {
                display: none;
            }
        }
    }

    &.is-boxed {
        .file-label {
            flex-direction: column;
        }

        .file-cta {
            flex-direction: column;
            height: auto;
            padding: 1em 3em;
        }

        .file-name {
            border-width: 0 1px 1px;
        }

        .file-icon {
            height: 1.5em;
            width: 1.5em;

            .fa {
                font-size: 21px;
            }
        }

        &.is-small {
            .file-icon .fa {
                font-size: 14px;
            }
        }

        &.is-medium {
            .file-icon .fa {
                font-size: 28px;
            }
        }

        &.is-large {
            .file-icon .fa {
                font-size: 35px;
            }
        }

        &.has-name {
            .file-cta {
                border-radius: $file-radius $file-radius 0 0;
            }

            .file-name {
                border-radius: 0 0 $file-radius $file-radius;
                border-width: 0 1px 1px;
            }
        }
    }

    &.is-centered {
        justify-content: center;
    }

    &.is-fullwidth {
        .file-label {
            width: 100%;
        }

        .file-name {
            flex-grow: 1;
            max-width: none;
        }
    }

    &.is-right {
        justify-content: flex-end;

        .file-cta {
            border-radius: 0 $file-radius $file-radius 0;
        }

        .file-name {
            border-radius: $file-radius 0 0 $file-radius;
            border-width: 1px 0 1px 1px;
            order: -1;
        }
    }
}

.file-label {
    align-items: stretch;
    display: flex;
    cursor: pointer;
    justify-content: flex-start;
    overflow: hidden;
    position: relative;

    &:hover {
        .file-cta {
            background-color: color.adjust($file-cta-background-color, $lightness: -2.5%);
            color: var(--flex-file-cta-hover-color, #{$file-cta-hover-color});
        }

        .file-name {
            border-color: color.adjust($file-name-border-color, $lightness: -2.5%);
        }
    }

    &:active {
        .file-cta {
            background-color: color.adjust($file-cta-background-color, $lightness: -5%);
            color: var(--flex-file-cta-active-color, #{$file-cta-active-color});
        }

        .file-name {
            border-color: color.adjust($file-name-border-color, $lightness: -5%);
        }
    }
}

.file-input {
    height: 0.01em;
    left: 0;
    outline: none;
    position: absolute;
    top: 0;
    width: 0.01em;
}

.file-cta,
.file-name {
    @include mixins.control;

    border-color: var(--flex-file-border-color, #{$file-border-color});
    border-radius: $file-radius;
    font-size: 1em;
    padding-left: 1em;
    padding-right: 1em;
    white-space: nowrap;
}

.file-cta {
    background-color: var(--flex-file-cta-background-color, #{$file-cta-background-color});
    color: var(--flex-file-cta-color, #{$file-cta-color});
}

.file-name {
    border-color: var(--flex-file-name-border-color, #{$file-name-border-color});
    border-style: $file-name-border-style;
    border-width: $file-name-border-width;
    display: block;
    max-width: $file-name-max-width;
    overflow: hidden;
    text-align: left;
    text-overflow: ellipsis;
}

.file-icon {
    align-items: center;
    display: flex;
    height: 1em;
    justify-content: center;
    margin-right: 0.5em;
    width: 1em;

    .fa {
        font-size: 14px;
    }
}

.is-horizontal {
    .field:not(:first-child) {
        margin-top: 0;
    }

    &.is-mobile {
        @include mixins.mobile {
            .field-body {
                display: flex;

                .field {
                    margin-bottom: 0;
                }

                & > .field {
                    &:not(:last-child) {
                        margin-right: functions.size(0.75em);
                    }
                }
            }
        }
    }
}

.label {
    color: var(--flex-label-color, #{$label-color});
    display: block;
    font-size: variables.$size-normal;
    font-weight: $label-weight;

    &:not(:last-child) {
        margin-bottom: 0.5em;
    }

    // Sizes
    &.is-small {
        font-size: variables.$size-small;
    }

    &.is-medium {
        font-size: variables.$size-medium;
    }

    &.is-large {
        font-size: variables.$size-large;
    }
}

.help {
    display: block;
    font-size: $help-size;
    margin-top: 0.25em;

    @each $name, $pair in variables.$colors {
        $color: list.nth($pair, 1);

        &.is-#{$name} {
            color: var(#{'--flex-'}#{$name}, #{$color});
        }
    }
}
