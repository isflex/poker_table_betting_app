@use "sass:list";
@use "../utilities/variables";
@use "../utilities/mixins";
@use "../utilities/animations";
@use "../utilities/functions";

$sticker-height: functions.size(3.5em);

.sticker {
    @include mixins.apply-colors("background-color");

    font-size: functions.size(1.3em);
    flex-grow: 0;
    display: inline-flex;
    padding: 0 functions.size(5em);
    color: var(--flex-white, #{variables.$white});
    text-transform: uppercase;
    font-weight: variables.$weight-semibold;
    border-radius: 0 functions.size(1.8em) 0 0;
    height: $sticker-height;
    line-height: $sticker-height;
    flex-shrink: 0;

    &.is-outlined {
        @include mixins.apply-colors("border-color");
        @include mixins.apply-colors();

        background-color: transparent;
        border-style: solid;
        border-width: functions.size(0.1em);

        &.is-inverted {
            background-color: transparent;
            border-color: var(--flex-white, #{variables.$white});
            color: var(--flex-white !important, #{variables.$white !important});
        }
    }

    &.is-inverted {
        @include mixins.apply-colors();

        background-color: white;
    }

    &.is-small {
        font-size: functions.size(1.1em);
        padding: 0 functions.size(0.4em);
        border-radius: variables.$radius-small;
        height: functions.size(2.1em);
        line-height: functions.size(2.1em);
    }

    &.is-stretched {
        border-radius: variables.$radius 0;
        padding: 0 functions.size(1em);
        position: relative;
        margin-right: functions.size(1em);
        margin-left: functions.size(1em);

        @each $name, $pair in variables.$colors {
            $color: list.nth($pair, 1);

            &.is-#{$name}::after,
            &.is-#{$name}::before {
                background-color: var(#{'--flex-'}#{$name}, #{$color});
                border: functions.size(0.1em) solid var(#{'--flex-'}#{$name}, #{$color});
            }
        }

        &::before,
        &::after {
            position: absolute;
            top: 0;
            content: " ";
            transform: skew(-20deg);
            padding-left: functions.size(0.7em);
            padding-right: functions.size(0.7em);
            line-height: 2em;
            height: 100%;
            display: block;
        }

        &::before {
            border-radius: variables.$radius 0 0 variables.$radius;
            left: functions.size(-0.6em);
        }

        &::after {
            border-radius: 0 variables.$radius variables.$radius 0;
            right: functions.size(-0.7em);
        }
    }
}

@mixin hat-margins {
    position: relative;
    border-top-left-radius: 0 !important;
    border-top-right-radius: 0 !important;
    text-align: center;
    margin-top: $sticker-height !important;
}

.has-hat,
.has-hat-desktop,
.has-hat-mobile {
    .is-hat {
        display: inline-block;
        border-radius: variables.$radius variables.$radius 0 0;
        position: absolute;
        top: -$sticker-height;
        left: 0;
        right: 0;
        white-space: nowrap;
        padding-left: functions.size(0.5em);
        padding-right: functions.size(0.5em);
        overflow: hidden;
        text-overflow: ellipsis;
    }

    &.is-fullheight {
        height: calc(100% - #{$sticker-height}) !important;
    }
}

.has-hat {
    @include hat-margins();
}

.has-hat-desktop {
    @include mixins.desktop() {
        @include hat-margins();
    }
}

.has-hat-tablet {
    @include mixins.tablet() {
        @include hat-margins();
    }
}

.has-hat-mobile {
    @include mixins.mobile() {
        @include hat-margins();
    }
}
