@use "sass:list";
@use "../variables/initial-variables" as initial-variables;
@use "../variables/derived-variables" as derived-variables;
@use "../functions";
@use "./controls";

%delete {
    @extend %unselectable;

    -moz-appearance: none;
    -webkit-appearance: none;
    background-color: rgba(initial-variables.$black, 0.2);
    border: none;
    border-radius: initial-variables.$radius-rounded;
    cursor: pointer;
    display: inline-block;
    flex-grow: 0;
    flex-shrink: 0;
    font-size: 0;
    height: 20px;
    max-height: 20px;
    max-width: 20px;
    min-height: 20px;
    min-width: 20px;
    outline: none;
    position: relative;
    vertical-align: top;
    width: 20px;

    &::before,
    &::after {
        background-color: var(--flex-white, #{initial-variables.$white});
        content: "";
        display: block;
        left: 50%;
        position: absolute;
        top: 50%;
        transform: translateX(-50%) translateY(-50%) rotate(45deg);
        transform-origin: center center;
    }

    &::before {
        height: 2px;
        width: 50%;
    }

    &::after {
        height: 50%;
        width: 2px;
    }

    &:hover,
    &:focus {
        background-color: rgba(initial-variables.$black, 0.3);
    }

    &:active {
        background-color: rgba(initial-variables.$black, 0.4);
    }

    // Sizes
    &.is-small {
        height: 16px;
        max-height: 16px;
        max-width: 16px;
        min-height: 16px;
        min-width: 16px;
        width: 16px;
    }

    &.is-medium {
        height: 24px;
        max-height: 24px;
        max-width: 24px;
        min-height: 24px;
        min-width: 24px;
        width: 24px;
    }

    &.is-large {
        height: 32px;
        max-height: 32px;
        max-width: 32px;
        min-height: 32px;
        min-width: 32px;
        width: 32px;
    }
}

%unselectable {
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
}

@mixin delete {
    @extend %delete;
}

@mixin arrow($color, $direction: 'down') {
    @if $direction == 'up' {
        content: "\f105";
    }

    @else if $direction == 'left' {
        content: "\f108";
    }

    @else if $direction == 'right' {
        content: "\f107";
    }

    @else {
        content: "\f101";
    }

    color: $color;
    position: absolute;
    font-family: flexi-ui;
    font-size: functions.size(1.5em);
    font-style: normal;
    font-weight: 600;
    display: inline-block;
    text-decoration: inherit;
    text-align: center;
    font-variant: normal;
    text-transform: none;
    line-height: 1em;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

@mixin block {
    &:not(:last-child) {
        margin-bottom: functions.size(1.5em);
    }
}

@mixin clearfix {
    &::after {
        clear: both;
        content: " ";
        display: table;
    }
}

@mixin center($width, $height: 0) {
    position: absolute;

    @if $height != 0 {
        left: calc(50% - (#{$width} / 2));
        top: calc(50% - (#{$height} / 2));
    }

    @else {
        left: calc(50% - (#{$width} / 2));
        top: calc(50% - (#{$width} / 2));
    }
}

@mixin loader {
    animation: spinAround 500ms infinite linear;
    border: 2px solid derived-variables.$border;
    border-radius: 290486px;
    border-right-color: transparent;
    border-top-color: transparent;
    content: "";
    display: block;
    height: 1em;
    position: relative;
    width: 1em;
}

@mixin overflow-touch {
    -webkit-overflow-scrolling: touch;
}

@mixin overlay($offset: 0) {
    bottom: $offset;
    left: $offset;
    position: absolute;
    right: $offset;
    top: $offset;
}

@mixin placeholder {
    $placeholders: ":-moz" ":-webkit-input" "-moz" "-ms-input";

    @each $placeholder in $placeholders {
        &:#{$placeholder}-placeholder {
            @content;
        }
    }
}

@mixin unselectable {
    @extend %unselectable;
}

@mixin ui-icon {
    font-family: flexi-ui;
    font-style: normal;
    font-weight: normal;
    display: inline-block;
    text-decoration: inherit;
    margin-right: .2em;
    text-align: center;

    /* For safety - reset parent styles, that can break glyph codes*/
    font-variant: normal;
    text-transform: none;

    /* fix buttons height, for twitter bootstrap */
    line-height: 1em;

    /* remove if not needed */
    margin-left: .2em;

    /* Font smoothing. That was taken from TWBS */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

// Responsiveness
@mixin from($device) {
    @media screen and (min-width: $device) {
        @content;
    }
}

@mixin until($device) {
    @media screen and (max-width: $device - 1px) {
        @content;
    }
}

@mixin mobile {
    @media screen and (max-width: initial-variables.$tablet - 1px) {
        @content;
    }
}

@mixin tablet {
    @media screen and (min-width: initial-variables.$tablet), print {
        @content;
    }
}

@mixin tablet-only {
    @media screen and (min-width: initial-variables.$tablet) and (max-width: initial-variables.$desktop - 1px) {
        @content;
    }
}

@mixin touch {
    @media screen and (max-width: initial-variables.$desktop - 1px) {
        @content;
    }
}

@mixin desktop {
    @media screen and (min-width: initial-variables.$desktop) {
        @content;
    }
}

@mixin desktop-only {
    @media screen and (min-width: initial-variables.$desktop) and (max-width: initial-variables.$widescreen - 1px) {
        @content;
    }
}

@mixin until-widescreen {
    @media screen and (max-width: initial-variables.$widescreen - 1px) {
        @content;
    }
}

@mixin widescreen {
    @media screen and (min-width: initial-variables.$widescreen) {
        @content;
    }
}

@mixin widescreen-only {
    @media screen and (min-width: initial-variables.$widescreen) and (max-width: initial-variables.$fullhd - 1px) {
        @content;
    }
}

@mixin until-fullhd {
    @media screen and (max-width: initial-variables.$fullhd - 1px) {
        @content;
    }
}

@mixin fullhd {
    @media screen and (min-width: initial-variables.$fullhd) {
        @content;
    }
}

@mixin all-desktop-only {
    @media screen and (min-width: initial-variables.$desktop) and (max-width: initial-variables.$fullhd - 1px) {
        @content;
    }
}

@mixin hamburger($dimensions) {
    cursor: pointer;
    display: block;
    height: $dimensions;
    position: relative;
    width: $dimensions;

    span {
        background-color: currentColor;
        display: block;
        height: 1px;
        left: 50%;
        margin-left: -7px;
        position: absolute;
        top: 50%;
        transition: none initial-variables.$speed initial-variables.$easing;
        transition-property: background, left, opacity, transform;
        width: 15px;

        &:nth-child(1) {
            margin-top: -6px;
        }

        &:nth-child(2) {
            margin-top: -1px;
        }

        &:nth-child(3) {
            margin-top: 4px;
        }
    }

    &:hover {
        background-color: rgba(black, 0.05);
    }

    // Modifers
    &.is-active {
        span {
            &:nth-child(1) {
                margin-left: -5px;
                transform: rotate(45deg);
                transform-origin: left top;
            }

            &:nth-child(2) {
                opacity: 0;
            }

            &:nth-child(3) {
                margin-left: -5px;
                transform: rotate(-45deg);
                transform-origin: left bottom;
            }
        }
    }
}

@mixin ellipsis() {
    white-space: nowrap;
    overflow-x: hidden;
    text-overflow: ellipsis;
}

@mixin text-tags() {
    a,
    span,
    p,
    i,
    strong,
    h1,
    h2,
    h3,
    h4,
    h5,
    label,
    h6 {
        @content;
    }
}

@mixin heading-tags() {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6 {
        @content;
    }
}

@mixin apply-shadow-box {
    box-shadow: derived-variables.$shadow;
}

@mixin apply-colors($property: "color") {
  @each $name, $pair in derived-variables.$colors {
      $color: list.nth($pair, 1);

      &.is-#{$name} {
          #{$property}: var(#{'--flex-'}#{$name}, #{$color});
      }
  }

  .is-admin & {
      // #{$property}: var(--flex-admin-invert, #{derived-variables.$admin-invert});
      #{$property}: var(--flex-admin, #{derived-variables.$admin});
  }
}

@mixin pattern-light ($size, $x-pos: top, $y-pos: center) {
    background: url('https://local.flexiness.com:3992/assets/svg/pattern-light-logo.svg') no-repeat;
    background-size: $size;
    background-position: $x-pos $y-pos;
}

@mixin pattern-dark ($size, $x-pos: top, $y-pos: center) {
    background: url('https://local.flexiness.com:3992/assets/jpg/transparent-noise.png'), url('https://local.flexiness.com:3992/assets/svg/pattern-dark-logo.svg') no-repeat, linear-gradient(#1b3650, derived-variables.$secondary);
    background-size: auto, $size, auto;
    background-position: top left, $x-pos $y-pos, top left;
}

// import sass bulma
@mixin input {
    @include controls.control;

    background-color: var(--flex-input-fill, #{derived-variables.$input-fill});
    border-color: var(--flex-input-border-color, #{derived-variables.$input-border-color});
    color: var(--flex-input-color, #{derived-variables.$input-color});

    @include placeholder {
        color: var(--flex-input-color, #{derived-variables.$input-color});
        opacity: 0.6;
        transition: all 0.2s ease-out;
    }

    &:hover,
    &.is-hovered,
    &:focus,
    &.is-focused {
        border-color: var(--flex-input-hover-border-color, #{derived-variables.$input-hover-border-color});
    }

    &[disabled] {
        background-color: var(--flex-input-disabled-background-color, #{derived-variables.$input-disabled-background-color});
        border-color: var(--flex-input-disabled-border-color, #{derived-variables.$input-disabled-border-color});
        color: var(--flex-input-disabled-color, #{derived-variables.$input-disabled-color});

        @include placeholder {
            color: var(--flex-input-disabled-color, #{derived-variables.$input-disabled-color});
        }
    }
}

@mixin fullwidth {
  width: 100%;
}
