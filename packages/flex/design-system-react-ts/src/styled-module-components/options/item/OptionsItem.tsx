import React, { useEffect, useState } from 'react'
import { OptionsItemProps } from './OptionsItemProps'
import { nanoid } from 'nanoid'

/**
 * Options Item Component
 * @param id {string} Id for Options Item - Default id generated by default
 * @param disabled {boolean} Disabled Options Item
 * @param name {string} Options Item name
 * @param value {string} Value for options item
 * @param checked {boolean} Checked options item
 * @param label {string} Label for options item
 * @param readonly {boolean} readonly options item
 * @param onChange {onChange} onChange Event
 * @param onClick {onClick} onClick Event
 */
const OptionsItem = ({
  id,
  disabled,
  name,
  value,
  checked,
  label,
  readonly,
  onChange,
  onClick,
  ...others
}: OptionsItemProps): React.JSX.Element => {
  const [_checked, setChecked] = useState<boolean>(Boolean(checked) || false)

  useEffect(() => {
    if (readonly) {
      setChecked(checked || false)
    }
  }, [readonly, checked])

  const idGenerated = nanoid()

  return (
    <div className='field' {...others}>
      <div className='control'>
        <input
          type='radio'
          id={id || idGenerated}
          name={name}
          value={value}
          disabled={disabled}
          checked={readonly ? checked : _checked}
          onChange={(e: React.ChangeEvent) => {
            return e
          }}
          onClick={(e: React.MouseEvent) => {
            const target = e.target as HTMLInputElement
            if (!readonly && target.checked !== undefined) {
              setChecked(target.checked)
            }
            target.value = value || ''
            if (onChange) {
              onChange({
                optionId: target.id,
                optionValue: target.value,
                optionName: target.name,
                optionChecked: target.checked,
              })
            }
            if (onClick) {
              onClick({
                optionId: target.id,
                optionValue: target.value,
                optionName: target.name,
                optionChecked: target.checked,
              })
            }
          }}
        />
        <label htmlFor={id || idGenerated}>{label}</label>
      </div>
    </div>
  )
}

export default OptionsItem
