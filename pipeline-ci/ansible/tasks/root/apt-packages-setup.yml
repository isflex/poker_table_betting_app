- name: Install core apt-packages
  become: true
  apt:
    name: [
      'gnupg',
      'acl',
      'tree',
      'jq',
      'gettext-base',
      'cpio',
      'apt-transport-https',
      'net-tools'
    ]
  when: "'core' in ansible_run_tags"
  tags:
    - core

# https://dev.to/chis0m/installing-puppeteer-on-an-ubuntu-aws-ec2-instance-5o7
- name: Install Puppeteer apt-packages
  become: true
  apt:
    name:
      [
        'gconf-service',
        'libgbm-dev',
        # 'libasound2',
        'libatk1.0-0',
        'libc6',
        'libcairo2',
        'libcups2',
        'libdbus-1-3',
        'libexpat1',
        'libfontconfig1',
        'libgcc1',
        # 'libgconf-2-4',
        'libgdk-pixbuf2.0-0',
        'libglib2.0-0',
        'libgtk-3-0',
        'libnspr4',
        'libpango-1.0-0',
        'libpangocairo-1.0-0',
        'libstdc++6',
        'libx11-6',
        'libx11-xcb1',
        'libxcb1',
        'libxcomposite1',
        'libxcursor1',
        'libxdamage1',
        'libxext6',
        'libxfixes3',
        'libxi6',
        'libxrandr2',
        'libxrender1',
        # 'libxss1',
        'libxtst6',
        'ca-certificates',
        'fonts-liberation',
        'fonts-ipafont-gothic',
        'fonts-wqy-zenhei',
        'fonts-thai-tlwg',
        'fonts-kacst',
        'fonts-freefont-ttf',
        'libappindicator1',
        # 'libnss3',
        'lsb-release',
        'xdg-utils',
      ]
  when: "'test' in ansible_run_tags and 'x64' in ansible_run_tags"
  tags:
    - test
    - x64

- name: Install Cypress apt-packages
  become: true
  apt:
    name:
      [
        'libgtk2.0-0',
        'libnotify-dev',
        # 'libgconf-2-4',
        # 'libnss3',
        # 'libxss1',
        # 'libasound2',
        'xvfb'
      ]
  when: "'test' in ansible_run_tags and 'x64' in ansible_run_tags"
  tags:
    - test
    - x64

# https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md
# https://dev.to/cloudx/how-to-use-puppeteer-inside-a-docker-container-568c
- name: Add architecture amd64 | Chromium install
  ansible.builtin.shell: |
    apt-get update && apt-get install gnupg wget -y
    wget --quiet --output-document=- https://dl-ssl.google.com/linux/linux_signing_key.pub | gpg --dearmor > /etc/apt/trusted.gpg.d/google-archive.gpg
    bash -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
    apt-get update
    apt-get install google-chrome-stable -y --no-install-recommends
    rm -rf /var/lib/apt/lists/*
  args:
    executable: /bin/bash
  when: "'test' in ansible_run_tags and 'x64' in ansible_run_tags"
  tags:
    - test
    - x64

# https://www.deeptechpoint.com/how-to-install-puppeteer-on-arm64-ubuntu
- name: Prepare Updates arm64 | Chromium install
  ansible.builtin.blockinfile:
    path: /etc/apt/sources.list
    block: |
      deb [arch=arm64] http://ports.ubuntu.com/ focal main multiverse universe
      deb [arch=arm64] http://ports.ubuntu.com/ focal-security main multiverse universe
      deb [arch=arm64] http://ports.ubuntu.com/ focal-backports main multiverse universe
      deb [arch=arm64] http://ports.ubuntu.com/ focal-updates main multiverse universe
    marker: "## {mark} added by ansible (configuration chromium on arm64 ubuntu)"
    state: present
  when: "'test' in ansible_run_tags and 'arm64' in ansible_run_tags"
  tags:
    - test
    - arm64

- name: Add architecture arm64 | Chromium install
  ansible.builtin.shell: |
    dpkg --print-foreign-architectures
    dpkg --add-architecture arm64
    dpkg --print-foreign-architectures
  args:
    executable: /bin/bash
  when: "'test' in ansible_run_tags and 'arm64' in ansible_run_tags"
  tags:
    - test
    - arm64

- name: Update apt packages
  become: true
  apt:
    update_cache: yes
  when: "'test' in ansible_run_tags and 'arm64' in ansible_run_tags"
  tags:
    - test
    - arm64

- name: Chromium install | arm64
  become: true
  ansible.builtin.apt:
    name:
      [
        'chromium-browser'
      ]
  when: "'test' in ansible_run_tags and 'arm64' in ansible_run_tags"
  tags:
    - test
    - arm64

# https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-ubuntu/
# Does not work in docker, possible alternatives :
# https://github.com/csuka/ansible_role_mongodb
# https://github.com/PharosProduction/tutorial-mongodb-ansible
# https://github.com/ansible-collections/community.mongodb
- name: Install MongoDB Community Edition mongodb.org (Official)
  block:
    - name: Create a db directory if it does not exist
      ansible.builtin.file:
        path: "/home/{{ lookup('env', 'FLEX_USER') }}/data/db"
        state: directory
        mode: '0755'
        owner: "{{ lookup('env', 'FLEX_USER') }}"
        group: "{{ lookup('env', 'FLEX_USER') }}"

    - name: Install MongoDB - Jammy - Ubuntu 22.04
      ansible.builtin.shell: |
        apt-get purge mongo*
        apt-get update && apt-get install gnupg wget -y
        wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | apt-key add -
        bash -c 'echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse" | tee /etc/apt/sources.list.d/mongodb-org-6.0.list'
        apt-get update
        apt-get install -y mongodb-org
        echo "mongodb-org hold" | dpkg --set-selections
        echo "mongodb-org-database hold" | dpkg --set-selections
        echo "mongodb-org-server hold" | dpkg --set-selections
        echo "mongodb-mongosh hold" | dpkg --set-selections
        echo "mongodb-org-mongos hold" | dpkg --set-selections
        echo "mongodb-org-tools hold" | dpkg --set-selections
      args:
        executable: /bin/bash
  when: "'core' in ansible_run_tags"
  tags:
    - core

- name: Add architecture amd64 | mkcert
  become: true
  block:
    - name: Create mkcert dir
      ansible.builtin.shell: |
        cd {{ lookup('ansible.builtin.env', 'FLEX_HOME') }}
        mkdir -p certs/{{ lookup('ansible.builtin.env', 'FLEX_DOMAIN_NAME') }}/mkcert
      args:
        executable: /bin/bash

    - name: Install mkcert
      ansible.builtin.shell: |
        cd {{ lookup('ansible.builtin.env', 'FLEX_HOME') }}/certs/{{ lookup('ansible.builtin.env', 'FLEX_DOMAIN_NAME') }}/mkcert
        curl -JLO "https://dl.filippo.io/mkcert/latest?for=linux/amd64"
        chmod +x mkcert-v*-linux-amd64
        sudo cp mkcert-v*-linux-amd64 /usr/local/bin/mkcert
      args:
        executable: /bin/bash

    - name: Create mkcert self-signed SSL certificats
      ansible.builtin.shell: |
        cd {{ lookup('ansible.builtin.env', 'FLEX_HOME') }}/certs/{{ lookup('ansible.builtin.env', 'FLEX_DOMAIN_NAME') }}/mkcert
        mkcert -install
        echo $(mkcert -CAROOT)
        ls -al /usr/local/share/ca-certificates
        mkcert -key-file privkey.pem -cert-file cert.pem {{ lookup('ansible.builtin.env', 'FLEX_DOMAIN_NAME') }} "lighthouse.{{ lookup('ansible.builtin.env', 'FLEX_DOMAIN_NAME').split('.', 1)[1] }}" "*.{{ lookup('ansible.builtin.env', 'FLEX_DOMAIN_NAME') }}" localhost 127.0.0.1 ::1
        cat cert.pem > fullchain.pem
        cat "$(mkcert -CAROOT)/rootCA.pem" >> fullchain.pem
        chmod -R 644 *
      args:
        executable: /bin/bash
  when: "'core' in ansible_run_tags and 'x64' in ansible_run_tags"
  tags:
    - core
    - x64